// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(uuid())
  email             String            @unique
  passwordHash      String
  firstName         String
  lastName          String
  phone             String?
  role              UserRole
  clientBookings    Booking[]         @relation("ClientBookings")
  staffAssignments  StaffAssignment[]
  notifications     Notification[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@map("users")
}

enum UserRole {
  ADMIN
  STAFF
  CLIENT
}

model Studio {
  id              String          @id @default(uuid())
  name            String
  description     String
  hourlyRate      Float
  location        String
  capacity        Int
  imageUrl        String?
  isActive        Boolean         @default(true)
  equipment       Equipment[]
  bookings        Booking[]
  availability    Availability[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@map("studios")
}

model Equipment {
  id          String        @id @default(uuid())
  studioId    String
  studio      Studio        @relation(fields: [studioId], references: [id], onDelete: Cascade)
  name        String
  description String
  type        String
  status      EquipmentStatus
  imageUrl    String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("equipment")
}

enum EquipmentStatus {
  AVAILABLE
  IN_USE
  MAINTENANCE
}

model Booking {
  id                String            @id @default(uuid())
  studioId          String
  studio            Studio            @relation(fields: [studioId], references: [id])
  clientId          String
  client            User              @relation("ClientBookings", fields: [clientId], references: [id])
  startTime         DateTime
  endTime           DateTime
  status            BookingStatus
  totalPrice        Float
  notes             String?
  staffAssignments  StaffAssignment[]
  payments          Payment[]
  prepMaterials     PrepMaterial[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@map("bookings")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

model StaffAssignment {
  id          String    @id @default(uuid())
  bookingId   String
  booking     Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  staffId     String
  staff       User      @relation(fields: [staffId], references: [id])
  role        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("staff_assignments")
}

model Payment {
  id              String        @id @default(uuid())
  bookingId       String
  booking         Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  amount          Float
  paymentMethod   String
  status          PaymentStatus
  transactionId   String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("payments")
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model Availability {
  id          String    @id @default(uuid())
  studioId    String
  studio      Studio    @relation(fields: [studioId], references: [id], onDelete: Cascade)
  dayOfWeek   Int       // 0-6 (Sunday-Saturday)
  startTime   String    // HH:MM format
  endTime     String    // HH:MM format
  isAvailable Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("availability")
}

model PrepMaterial {
  id          String    @id @default(uuid())
  bookingId   String
  booking     Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  title       String
  description String?
  fileUrl     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("prep_materials")
}

model Notification {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        String
  message     String
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())

  @@map("notifications")
}